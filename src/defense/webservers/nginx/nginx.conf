# don't send the nginx version number in error pages and Server header
server_tokens off;

# config to don't allow the browser to render the page inside an frame or iframe
# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
add_header X-Frame-Options SAMEORIGIN;

# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
# to disable content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-Content-Type-Options nosniff;

# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for 
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block";

# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
# you can tell the browser that it can only download content from the domains you explicitly allow
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
# In this case we have enabled inline code snippets: 'unsafe-inline'. If possible, remove inline scripts and remove this 'unsafe-inline'. The same applies for CSS too. I have not added 'unsafe-eval' and would advise that you do not either.
# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' <ADD_WHITELISTED_DOMAINS>; img-src 'self' <ADD_WHITELISTED_DOMAINS>; style-src 'self' 'unsafe-inline' <ADD_WHITELISTED_DOMAINS>; font-src 'self' <ADD_WHITELISTED_DOMAINS>; frame-src <ADD_WHITELISTED_DOMAINS>; object-src 'none'" always;
# Backward compatibility for Firefox versions lesser than 23 and Internet Explorer upto IE 10
add_header X-Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' <ADD_WHITELISTED_DOMAINS>; img-src 'self' <ADD_WHITELISTED_DOMAINS>; style-src 'self' 'unsafe-inline' <ADD_WHITELISTED_DOMAINS>; font-src 'self' <ADD_WHITELISTED_DOMAINS>; frame-src <ADD_WHITELISTED_DOMAINS>; object-src 'none'" always;
# Backward compatibility for upto Chrome 25
add_header X-WebKit-CSP "default-src 'self'; script-src 'self' 'unsafe-inline' <ADD_WHITELISTED_DOMAINS>; img-src 'self' <ADD_WHITELISTED_DOMAINS>; style-src 'self' 'unsafe-inline' <ADD_WHITELISTED_DOMAINS>; font-src 'self' <ADD_WHITELISTED_DOMAINS>; frame-src <ADD_WHITELISTED_DOMAINS>; object-src 'none'" always;

server {
  listen 443 ssl default deferred;
  server_name <INSERT_SERVER_NAME>;

  # enable session resumption to improve https performance
  # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
  # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
  ssl_certificate /path/to/signed_cert_plus_intermediates;
  ssl_certificate_key /path/to/private_key;
  ssl_session_cache shared:SSL:50m;
  ssl_session_timeout 5m;
  ssl_session_tickets off;

  # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
  # to generate your PEM file, run in the terminal
  # openssl dhparam -out /etc/nginx/ssl/<NAME_OF_PEM> 2048
  ssl_dhparam /etc/nginx/ssl/<NAME_OF_PEM>.pem;

  # enables server-side protection from BEAST attacks
  # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
  ssl_prefer_server_ciphers on;
  # Only enable TLSv1.2
  ssl_protocols TLSv1.2;
  # ciphers chosen from https://mozilla.github.io/server-side-tls/ssl-config-generator/
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';

  
  # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
  # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
  resolver <IP DNS resolver>;
  ssl_stapling on;
  ssl_trusted_certificate /etc/nginx/ssl/<INSERT_CERT_NAME>.crt;

  # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
  # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
  # HSTS (ngx_http_headers_module is required)
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

  # ... the rest of your configuration
}

# redirect all http traffic to https
server {
    listen 80 default_server;
    listen [::]:80 default_server;
  
  # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
  return 301 https://$host$request_uri;
}
